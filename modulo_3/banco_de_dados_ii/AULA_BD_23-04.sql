-- 1
CREATE TABLE ALUNO (
MATRICULA INT NOT NULL PRIMARY KEY,
NOME VARCHAR(40) NOT NULL
);

CREATE OR REPLACE FUNCTION PROIBE_INICIAL_A() 
RETURNS TRIGGER 
AS $$
BEGIN
	IF NEW.NOME ILIKE 'A%' THEN
		RAISE EXCEPTION 'NÃO É PERMITIDO CADASTRO DE ALUNO COMEÇADO COM A LETRA "A"';
	END IF;
	RAISE NOTICE 'CADASTRADO COM SUCESSO';
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER PROIBE_A 
BEFORE INSERT OR UPDATE 
ON ALUNO 
FOR EACH ROW EXECUTE PROCEDURE PROIBE_INICIAL_A();

INSERT INTO ALUNO VALUES (1, 'LUCAS');
INSERT INTO ALUNO VALUES (1, 'ANTONIO');

RAISE INFO 'MENSAGEM'
RAISE NOTICE 'MENSAGEM'
RAISE EXCEPTION '% NÃO PODE SER CADASTRADO(A)', NEW.NOME;


-- 2
CREATE TABLE FUNCIONARIO (
COD INT NOT NULL PRIMARY KEY,
NOME VARCHAR(30),
SALARIO INT,
DATA_ULTIMA_ATUALIZACAO TIMESTAMP DEFAULT NOW(),
USUARIO_QUE_ATUALIZOU VARCHAR(30) DEFAULT CURRENT_USER
);

CREATE OR REPLACE FUNCTION VERIFICACAO_DADOS() 
RETURNS TRIGGER 
AS $$
BEGIN
	IF NEW.NOME IS NULL THEN
		RAISE EXCEPTION 'O NOME NÃO PODE SER NULO';
	ELSIF NEW.SALARIO IS NULL THEN
		RAISE EXCEPTION 'O SALÁRIO NÃO PODE SER NULO';
	ELSIF NEW.SALARIO < 0 THEN
		RAISE EXCEPTION 'O SALÁRIO NÃO PODE SER NEGATIVO';
	END IF;
	NEW.DATA_ULTIMA_ATUALIZACAO := NOW();
    NEW.USUARIO_QUE_ATUALIZOU := CURRENT_USER;
	RAISE NOTICE 'CADASTRADO COM SUCESSO';
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER VERIFICACAO
BEFORE INSERT OR UPDATE
ON FUNCIONARIO
FOR EACH ROW EXECUTE PROCEDURE VERIFICACAO_DADOS();

INSERT INTO FUNCIONARIO VALUES (1);
INSERT INTO FUNCIONARIO VALUES (1, 'LUCAS');
INSERT INTO FUNCIONARIO VALUES (1, 'LUCAS', -1);
INSERT INTO FUNCIONARIO VALUES (1, 'LUCAS', 5000);
INSERT INTO FUNCIONARIO VALUES (2, 'ANTONIO', 4000);


-- 3
CREATE TABLE EMPREGADO (
COD SERIAL NOT NULL PRIMARY KEY,
NOME VARCHAR(40),
SALARIO INT
);

CREATE TABLE EMPREGADO_AUDITORIA (
COD SERIAL NOT NULL PRIMARY KEY,
OPERACAO VARCHAR(1),
USUARIO VARCHAR(40),
DATA TIMESTAMP,
NOME VARCHAR(40),
SALARIO INT
);

CREATE OR REPLACE FUNCTION VERIFICACAO()
RETURNS TRIGGER 
AS $$
BEGIN
	IF TG_OP = 'INSERT' THEN
		INSERT INTO EMPREGADO_AUDITORIA VALUES (DEFAULT, 'I', CURRENT_USER, NOW(), NEW.NOME, NEW.SALARIO);
		RAISE NOTICE 'EMPREGADO CADASTRADO COM SUCESSO';
	ELSIF TG_OP = 'UPDATE' THEN
		INSERT INTO EMPREGADO_AUDITORIA VALUES (DEFAULT, 'A', CURRENT_USER, NOW(), NEW.NOME, NEW.SALARIO);
		RAISE NOTICE 'EMPREGADO ATUALIZADO COM SUCESSO';
	ELSIF TG_OP = 'DELETE' THEN
		INSERT INTO EMPREGADO_AUDITORIA VALUES (DEFAULT, 'E', CURRENT_USER, NOW(), OLD.NOME, OLD.SALARIO);
		RAISE NOTICE 'EMPREGADO EXCLUÍDO COM SUCESSO';
	END IF;

	RETURN NULL;

END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER REGISTRO
AFTER INSERT OR UPDATE OR DELETE
ON EMPREGADO
FOR EACH ROW
EXECUTE PROCEDURE VERIFICACAO();

INSERT INTO EMPREGADO VALUES (DEFAULT, 'LUCAS', 10000);

UPDATE EMPREGADO
SET SALARIO = 20000
WHERE COD = 1;

DELETE FROM EMPREGADO WHERE COD = 1;

DROP TABLE EMPREGADO_AUDITORIA;

SELECT * FROM EMPREGADO;
SELECT * FROM EMPREGADO_AUDITORIA;


-- 4
CREATE TABLE EMPREGADO2 (
COD SERIAL NOT NULL PRIMARY KEY,
NOME VARCHAR(40),
SALARIO INT
);

CREATE TABLE EMPREGADO2_AUDIT(
USUARIO VARCHAR(40),
DATA TIMESTAMP,
ID INT,
COLUNA VARCHAR(50),
VALOR_ANTIGO VARCHAR(50),
VALOR_NOVO VARCHAR(50)
);

CREATE OR REPLACE FUNCTION VALIDACAO()
RETURNS TRIGGER
AS $$
BEGIN
	IF TG_OP = 'INSERT' THEN
		INSERT INTO EMPREGADO2_AUDIT VALUES (CURRENT_USER, NOW(), NEW.COD, 'NOME', NULL , COALESCE(CAST(NEW.NOME AS TEXT)));
		INSERT INTO EMPREGADO2_AUDIT VALUES (CURRENT_USER, NOW(), NEW.COD, 'SALÁRIO', NULL , COALESCE(CAST(NEW.SALARIO AS TEXT)));
		RAISE NOTICE 'O EMPREGADO FOI CADASTRADO COM SUCESSO';
	ELSIF TG_OP = 'UPDATE' THEN
		IF OLD.COD != NEW.COD THEN
			RAISE EXCEPTION 'NÃO É POSSÍVEL ALTERAR O CÓDIGO DO EMPREGADO';
		ELSE
			IF OLD.NOME != NEW.NOME THEN
				INSERT INTO EMPREGADO2_AUDIT VALUES (CURRENT_USER, NOW(), NEW.COD, 'NOME', COALESCE(CAST(OLD.NOME AS TEXT)), COALESCE(CAST(NEW.NOME AS TEXT)));
				RAISE NOTICE 'O NOME DO EMPREGADO FOI ATUALIZADO COM SUCESSO';
			ELSIF OLD.SALARIO != NEW.SALARIO THEN
				INSERT INTO EMPREGADO2_AUDIT VALUES (CURRENT_USER, NOW(), NEW.COD, 'SALÁRIO', COALESCE(CAST(OLD.SALARIO AS TEXT)), COALESCE(CAST(NEW.SALARIO AS TEXT)));
				RAISE NOTICE 'O SALÁRIO DO EMPREGADO FOI ATUALIZADO COM SUCESSO';
			END IF;
		END IF;
	ELSIF TG_OP = 'DELETE' THEN
		INSERT INTO EMPREGADO2_AUDIT VALUES (CURRENT_USER, NOW(), OLD.COD, 'NOME', COALESCE(CAST(OLD.NOME AS TEXT)), NULL);
		INSERT INTO EMPREGADO2_AUDIT VALUES (CURRENT_USER, NOW(), OLD.COD, 'SALÁRIO', COALESCE(CAST(OLD.SALARIO AS TEXT)), NULL);
		RAISE NOTICE 'O EMPREGADO FOI EXCLUÍDO COM SUCESSO';
	END IF;

	IF TG_OP = 'DELETE' THEN
		RETURN OLD;
	ELSE 
		RETURN NEW;
	END IF;
	
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER VALIDACAO_EMPREGADO
BEFORE INSERT OR UPDATE OR DELETE
ON EMPREGADO2
FOR EACH ROW
EXECUTE PROCEDURE VALIDACAO();

INSERT INTO EMPREGADO2 VALUES (DEFAULT, 'LUCAS', 5000);

UPDATE EMPREGADO2
SET COD = 2
WHERE COD = 1;

UPDATE EMPREGADO2
SET NOME = 'LUCAS MORAIS'
WHERE COD = 1;

UPDATE EMPREGADO2
SET SALARIO = 10000
WHERE COD = 1;

DELETE FROM EMPREGADO2 WHERE COD = 1;

SELECT * FROM EMPREGADO2;
SELECT * FROM EMPREGADO2_AUDIT;

DROP TABLE EMPREGADO2, EMPREGADO2_AUDIT;