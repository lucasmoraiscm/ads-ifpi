-- 1.
CREATE TABLE FORNECEDOR (
COD_FOR INT NOT NULL PRIMARY KEY,
NOME VARCHAR(40) NOT NULL,
ENDERECO VARCHAR(40) NOT NULL
);

CREATE TABLE TITULO (
COD_TIT INT NOT NULL PRIMARY KEY,
DESCR_TITULO VARCHAR(50) NOT NULL
);

CREATE TABLE LIVRO (
COD_LIVRO INT NOT NULL PRIMARY KEY,
COD_TIT INT NOT NULL REFERENCES TITULO(COD_TIT),
QUANT_ESTOQUE INT NOT NULL,
VALOR_UNITARIO FLOAT NOT NULL
);

CREATE TABLE PEDIDO (
COD_PEDIDO INT,
COD_FOR INT,
DT_PEDIDO DATE,
HORA_PEDIDO TIME,
VALOR_TOTAL_PEDIDO FLOAT,
QUANT_ITENS_PEDIDOS INT
);

CREATE TABLE ITEM_PEDIDO (
COD_LIVRO INT,
COD_PEDIDO INT,
QUANT_ITEM INT,
VALOR_TOTAL_ITEM FLOAT
);

INSERT INTO FORNECEDOR VALUES (1, 'Editora Alfa', 'Rua A, 100');
INSERT INTO FORNECEDOR VALUES (2, 'Editora Beta', 'Rua B, 200');
INSERT INTO FORNECEDOR VALUES (3, 'Distribuidora Gama', 'Av. C, 300');
INSERT INTO FORNECEDOR VALUES (4, 'Livros e Cia', 'Rua D, 400');
INSERT INTO FORNECEDOR VALUES (5, 'Mundo Literário', 'Av. E, 500');
INSERT INTO FORNECEDOR VALUES (6, 'Papelaria Nova', 'Rua F, 600');
INSERT INTO FORNECEDOR VALUES (7, 'Gráfica Top', 'Av. G, 700');
INSERT INTO FORNECEDOR VALUES (8, 'Book Express', 'Rua H, 800');
INSERT INTO FORNECEDOR VALUES (9, 'Mega Livros', 'Av. I, 900');
INSERT INTO FORNECEDOR VALUES (10, 'Cultura Viva', 'Rua J, 1000');

INSERT INTO TITULO VALUES (1, 'Lógica de Programação');
INSERT INTO TITULO VALUES (2, 'Banco de Dados Avançado');
INSERT INTO TITULO VALUES (3, 'Introdução ao HTML e CSS');
INSERT INTO TITULO VALUES (4, 'Python para Iniciantes');
INSERT INTO TITULO VALUES (5, 'Engenharia de Software');
INSERT INTO TITULO VALUES (6, 'Java Essencial');
INSERT INTO TITULO VALUES (7, 'Redes de Computadores');
INSERT INTO TITULO VALUES (8, 'Cálculo I');
INSERT INTO TITULO VALUES (9, 'História da Arte');
INSERT INTO TITULO VALUES (10, 'Economia Brasileira');

INSERT INTO LIVRO VALUES (1, 1, 50, 89.90);
INSERT INTO LIVRO VALUES (2, 2, 30, 120.00);
INSERT INTO LIVRO VALUES (3, 3, 40, 59.90);
INSERT INTO LIVRO VALUES (4, 4, 60, 75.00);
INSERT INTO LIVRO VALUES (5, 5, 25, 130.00);
INSERT INTO LIVRO VALUES (6, 6, 35, 99.90);
INSERT INTO LIVRO VALUES (7, 7, 20, 110.00);
INSERT INTO LIVRO VALUES (8, 8, 80, 65.00);
INSERT INTO LIVRO VALUES (9, 9, 15, 70.00);
INSERT INTO LIVRO VALUES (10, 10, 45, 85.50);

INSERT INTO PEDIDO VALUES (101, 1, '2024-02-05', '10:30', 179.80, 2);
INSERT INTO PEDIDO VALUES (102, 3, '2024-02-10', '14:00', 120.00, 1);
INSERT INTO PEDIDO VALUES (103, 2, '2024-02-25', '16:45', 195.00, 2);
INSERT INTO PEDIDO VALUES (104, 5, '2024-01-10', '11:00', 259.80, 3);
INSERT INTO PEDIDO VALUES (105, 4, '2024-03-03', '09:20', 130.00, 1);
INSERT INTO PEDIDO VALUES (106, 6, '2024-01-15', '13:40', 199.80, 2);
INSERT INTO PEDIDO VALUES (107, 7, '2024-03-07', '15:10', 220.00, 2);
INSERT INTO PEDIDO VALUES (108, 8, '2024-01-22', '12:00', 130.00, 1);
INSERT INTO PEDIDO VALUES (109, 9, '2024-03-15', '17:50', 170.00, 2);
INSERT INTO PEDIDO VALUES (110, 10, '2024-01-30', '10:15', 85.50, 1);

INSERT INTO ITEM_PEDIDO VALUES (1, 101, 2, 179.80);
INSERT INTO ITEM_PEDIDO VALUES (2, 102, 1, 120.00);
INSERT INTO ITEM_PEDIDO VALUES (3, 103, 1, 59.90);
INSERT INTO ITEM_PEDIDO VALUES (4, 103, 1, 135.10);
INSERT INTO ITEM_PEDIDO VALUES (5, 104, 1, 130.00);
INSERT INTO ITEM_PEDIDO VALUES (6, 104, 1, 99.90);
INSERT INTO ITEM_PEDIDO VALUES (7, 104, 1, 29.90);
INSERT INTO ITEM_PEDIDO VALUES (8, 105, 1, 130.00);
INSERT INTO ITEM_PEDIDO VALUES (9, 106, 2, 199.80);
INSERT INTO ITEM_PEDIDO VALUES (10, 107, 2, 220.00);

DROP VIEW VALOR_TOTAL_FEVEREIRO;
DROP TABLE FORNECEDOR, TITULO, LIVRO, PEDIDO, ITEM_PEDIDO;


-- 2.A)
CREATE OR REPLACE VIEW VALOR_TOTAL_FEVEREIRO
AS
SELECT NOME, SUM(VALOR_TOTAL_PEDIDO)VALOR_TOTAL FROM FORNECEDOR F 
JOIN PEDIDO P ON F.COD_FOR = P.COD_FOR 
WHERE DT_PEDIDO BETWEEN '01-02-2024' AND '29-02-2024'
GROUP BY NOME;

SELECT NOME FROM VALOR_TOTAL_FEVEREIRO WHERE VALOR_TOTAL > 150;

-- 2.B)
SELECT NOME FROM VALOR_TOTAL_FEVEREIRO ORDER BY VALOR_TOTAL DESC LIMIT 1;

-- 2.C)
SELECT NOME FROM VALOR_TOTAL_FEVEREIRO ORDER BY VALOR_TOTAL DESC;


-- 3.A)
CREATE OR REPLACE FUNCTION VALIDAR_DADOS_PEDIDO() 
RETURNS TRIGGER
AS $$
BEGIN
	IF NEW.COD_PEDIDO IS NULL OR NEW.COD_FOR IS NULL OR NEW.DT_PEDIDO IS NULL 
	OR NEW.HORA_PEDIDO IS NULL OR NEW.VALOR_TOTAL_PEDIDO IS NULL OR NEW.QUANT_ITENS_PEDIDOS IS NULL THEN
		RAISE EXCEPTION 'NÃO É PERMITIDO O CADASTRAMENTO DE VALOR NULO';
	END IF;

	IF TG_OP = 'INSERT' THEN
		IF NEW.COD_PEDIDO IN (SELECT COD_PEDIDO FROM PEDIDO) THEN
			RAISE EXCEPTION 'O CÓDIGO DO PEDIDO JÁ FOI CADASTRADO';
		ELSIF NEW.COD_FOR NOT IN (SELECT COD_FOR FROM FORNECEDOR) THEN
			RAISE EXCEPTION 'FORNECEDOR NÃO CADASTRADO';
		END IF;
	END IF;
	
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER VALIDACAO_DADOS_PEDIDO
BEFORE INSERT OR UPDATE 
ON PEDIDO
FOR EACH ROW
EXECUTE PROCEDURE VALIDAR_DADOS_PEDIDO();

INSERT INTO PEDIDO VALUES(1, 1, NOW(), NOW(), 100, 1);

SELECT * FROM PEDIDO;

CREATE OR REPLACE FUNCTION VALIDAR_DADOS_ITEM_PEDIDO() 
RETURNS TRIGGER
AS $$
BEGIN
	IF NEW.COD_LIVRO IS NULL OR NEW.COD_PEDIDO IS NULL 
	OR NEW.QUANT_ITEM IS NULL OR NEW.VALOR_TOTAL_ITEM IS NULL THEN
		RAISE EXCEPTION 'NÃO É PERMITIDO O CADASTRAMENTO DE VALOR NULO';
	END IF;

	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER VALIDACAO_DADOS_ITEM_PEDIDO
BEFORE INSERT OR UPDATE
ON ITEM_PEDIDO
FOR EACH ROW
EXECUTE PROCEDURE VALIDAR_DADOS_ITEM_PEDIDO();

INSERT INTO ITEM_PEDIDO VALUES (1, 1, 1, 100);
SELECT * FROM ITEM_PEDIDO;

-- 3.B)
CREATE OR REPLACE FUNCTION VERIFICAR_QUANTIDADE_LIVRO()
RETURNS TRIGGER
AS $$
BEGIN
	IF NEW.QUANT_ESTOQUE < 0 THEN
		RAISE EXCEPTION 'A QUANTIDADE EM ESTOQUE NÃO PODE SER NEGATIVA';
	ELSIF NEW.QUANT_ESTOQUE <= 10 THEN
		RAISE NOTICE 'QUANTIDADE MÍNIMA EM ESTOQUE (10 OU MENOS LIVROS)';
	END IF;

	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER VERIFICACAO_QUANTIDADE_LIVRO
BEFORE INSERT OR UPDATE
ON LIVRO
FOR EACH ROW
EXECUTE PROCEDURE VERIFICAR_QUANTIDADE_LIVRO();

INSERT INTO LIVRO VALUES (11, 1, 5, 20);
SELECT * FROM LIVRO;

-- 3.C)
CREATE OR REPLACE FUNCTION ATUALIZAR_PEDIDO()
RETURNS TRIGGER
AS $$
BEGIN
	IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN 
		UPDATE PEDIDO
		SET QUANT_ITENS_PEDIDOS = QUANT_ITENS_PEDIDOS + NEW.QUANT_ITEM
		WHERE COD_PEDIDO = NEW.COD_PEDIDO;

		UPDATE LIVRO
		SET QUANT_ESTOQUE = QUANT_ESTOQUE - NEW.QUANT_ITEM
		WHERE COD_LIVRO = NEW.COD_LIVRO;

		UPDATE PEDIDO
		SET VALOR_TOTAL_PEDIDO = VALOR_TOTAL_PEDIDO + NEW.VALOR_TOTAL_ITEM
		WHERE COD_PEDIDO = NEW.COD_PEDIDO;
	ELSIF TG_OP = 'DELETE' THEN 
		UPDATE PEDIDO
		SET QUANT_ITENS_PEDIDOS = QUANT_ITENS_PEDIDOS - OLD.QUANT_ITEM
		WHERE COD_PEDIDO = OLD.COD_PEDIDO;

		UPDATE LIVRO
		SET QUANT_ESTOQUE = QUANT_ESTOQUE + OLD.QUANT_ITEM
		WHERE COD_LIVRO = OLD.COD_LIVRO;

		UPDATE PEDIDO
		SET VALOR_TOTAL_PEDIDO = VALOR_TOTAL_PEDIDO - OLD.VALOR_TOTAL_ITEM
		WHERE COD_PEDIDO = OLD.COD_PEDIDO;
	END IF;

	IF TG_OP = 'DELETE' THEN
		RETURN OLD;
	ELSE
		RETURN NEW;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER ATUALIZACAO_PEDIDO
BEFORE INSERT OR UPDATE OR DELETE
ON ITEM_PEDIDO 
FOR EACH ROW
EXECUTE PROCEDURE ATUALIZAR_PEDIDO();

INSERT INTO PEDIDO VALUES (111, 1, NOW(), NOW(), 0, 0);
INSERT INTO ITEM_PEDIDO VALUES (11, 111, 1, 20);
INSERT INTO ITEM_PEDIDO VALUES (11, 111, 3, 60);
INSERT INTO ITEM_PEDIDO VALUES (11, 111, 1, 20);

UPDATE LIVRO
SET QUANT_ESTOQUE = 15
WHERE COD_LIVRO = 11;

SELECT * FROM PEDIDO;
SELECT * FROM ITEM_PEDIDO;
SELECT * FROM LIVRO;

-- 3.D)
CREATE TABLE CONTROLA_ALTERACAO (
COD_ALTERACAO SERIAL NOT NULL PRIMARY KEY,
OPERACAO VARCHAR(1) NOT NULL,
DATA_HORA TIMESTAMP NOT NULL,
USUARIO VARCHAR(40) NOT NULL,
COD_TIT_ANTIGO INT,
COD_TIT_NOVO INT,
QUANT_ESTOQUE_ANTIGA INT,
QUANT_ESTOQUE_NOVA INT
);

CREATE OR REPLACE FUNCTION CONTROLAR_ALTERACAO_LIVRO() 
RETURNS TRIGGER
AS $$ 
BEGIN
	IF TG_OP = 'INSERT' THEN
		INSERT INTO CONTROLA_ALTERACAO VALUES (DEFAULT, 'I', NOW(), CURRENT_USER, NULL, NEW.COD_TIT, NULL, NEW.QUANT_ESTOQUE);
	ELSIF TG_OP = 'UPDATE' THEN
		INSERT INTO CONTROLA_ALTERACAO VALUES (DEFAULT, 'U', NOW(), CURRENT_USER, OLD.COD_TIT, NEW.COD_TIT, OLD.QUANT_ESTOQUE, NEW.QUANT_ESTOQUE);
	ELSIF TG_OP = 'DELETE' THEN
		INSERT INTO CONTROLA_ALTERACAO VALUES (DEFAULT, 'D', NOW(), CURRENT_USER, OLD.COD_TIT, NULL, OLD.QUANT_ESTOQUE, NULL);
	END IF;

	IF TG_OP = 'DELETE' THEN
		RETURN OLD;
	ELSE
		RETURN NEW;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER CONTROLE_ALTERACAO_LIVRO 
BEFORE INSERT OR UPDATE OR DELETE
ON LIVRO
FOR EACH ROW
EXECUTE PROCEDURE CONTROLAR_ALTERACAO_LIVRO();

INSERT INTO LIVRO VALUES (12, 1, 20, 30);

UPDATE LIVRO
SET QUANT_ESTOQUE = 30
WHERE COD_LIVRO = 12;

DELETE FROM LIVRO WHERE COD_LIVRO = 12;

SELECT * FROM LIVRO;
SELECT * FROM CONTROLA_ALTERACAO;

DROP TABLE CONTROLA_ALTERACAO;